apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'

group = 'org.rbd'
version = '0.0.1-SNAPSHOT'

description = "springlab"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

ext {
    springVersion = "5.1.0.RC2"
    springBootVersion = "2.1.0.M2"
}
repositories {
    maven { url "https://repo.spring.io/libs-milestone" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

allprojects {
	group = 'org.springframework.integration'
	repositories {
		maven { url 'https://repo.spring.io/libs-milestone' }
		if (version.endsWith('BUILD-SNAPSHOT')) {
			maven { url 'https://repo.spring.io/libs-snapshot' }
		}
	}
}

buildscript {
	ext.kotlinVersion = '1.2.61'
	repositories {
		maven { url 'https://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath 'io.spring.gradle:docbook-reference-plugin:0.3.1'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.8'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
	}
}
subprojects { subproject ->

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'jacoco'
	//apply plugin: 'checkstyle'
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

    task hello << { task -> println "I'm $task.project.name with $subproject.sourceSets.test.resources.srcDirs" }

	compileTestKotlin {
		kotlinOptions {
			freeCompilerArgs = ['-Xjsr305=strict']
			jvmTarget = '1.8'
		}
	}

	ext {
		activeMqVersion = '5.15.3'
		apacheSshdVersion = '1.7.0'
		aspectjVersion = '1.9.0'
		assertjVersion = '3.9.1'
		assertkVersion = '0.12'
		boonVersion = '0.34'
		commonsDbcp2Version = '2.2.0'
		commonsIoVersion = '2.6'
		commonsNetVersion = '3.6'
		curatorVersion = '4.0.1'
		derbyVersion = '10.13.1.1'
		eclipseLinkVersion = '2.7.1'
		ftpServerVersion = '1.1.1'
		googleJsr305Version = '3.0.2'
		groovyVersion = '2.4.15'
		guavaVersion = '20.0'
		hamcrestVersion = '1.3'
		hazelcastVersion = '3.8'
		hibernateVersion = '5.2.16.Final'
		hsqldbVersion = '2.4.0'
		h2Version = '1.4.197'
		jackson2Version = '2.9.5'
		javaxActivationVersion = '1.1.1'
		javaxMailVersion = '1.6.1'
		jmsApiVersion = '2.0.1'
		jpa21ApiVersion = '1.0.0.Final'
		jpaApiVersion = '2.1.1'
		jrubyVersion = '9.1.16.0'
		jschVersion = '0.1.54'
		jsonpathVersion = '2.4.0'
		junit4Version = '4.12'
		junitJupiterVersion = '5.1.1'
		junitPlatformVersion = '1.1.1'
		jythonVersion = '2.5.3'
		kryoShadedVersion = '3.0.3'
		lettuceVersion = '5.0.3.RELEASE'
		log4jVersion = '2.11.0'
		micrometerVersion = '1.0.6'
		mockitoVersion = '2.18.0'
		mysqlVersion = '8.0.11'
		pahoMqttClientVersion = '1.2.0'
		postgresVersion = '42.0.0'
		reactorNettyVersion = '0.8.0.M2'
		reactorVersion = '3.2.0.M4'
		romeToolsVersion = '1.9.0'
		servletApiVersion = '4.0.0'
		smackVersion = '4.2.3'
		springAmqpVersion = project.hasProperty('springAmqpVersion') ? project.springAmqpVersion : '2.1.0.M2'
		springDataJpaVersion = '2.1.0.RC2'
		springDataMongoVersion = '2.1.0.RC2'
		springDataRedisVersion = '2.1.0.RC2'
		springGemfireVersion = '2.1.0.RC2'
		springSecurityVersion = '5.1.0.RC1'
		springRetryVersion = '1.2.2.RELEASE'
		springVersion = project.hasProperty('springVersion') ? project.springVersion : '5.1.0.RC2'
		springWsVersion = '3.0.2.RELEASE'
		tomcatVersion = "9.0.7"
		xmlUnitVersion = '1.6'
		xstreamVersion = '1.4.10'
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	jacoco {
		toolVersion = "0.7.9"
	}

	// dependencies that are common across all java projects
	dependencies {
		// JSR-305 only used for non-required meta-annotations
		compileOnly("com.google.code.findbugs:jsr305:$googleJsr305Version")
		testCompile("com.google.code.findbugs:jsr305:$googleJsr305Version")

        //RSW I added
		compile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
		runtime "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"

        testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
		testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
		testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"

		// To support JUnit 4 tests
		testRuntime "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"

		// To avoid compiler warnings about @API annotations in JUnit code
		testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

		testRuntime "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
		testRuntime "org.apache.logging.log4j:log4j-jcl:$log4jVersion"

		testCompile("com.willowtreeapps.assertk:assertk-jvm:$assertkVersion")

		testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
		testRuntime "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

	}

	// enable all compiler warnings; individual projects may customize further
	ext.xLintArg = '-Xlint:all,-options,-processing'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	task checkTestConfigs {
		doLast {
			def configFiles = []
			sourceSets.test.java.srcDirs.each {
				fileTree(it).include('**/*.xml').exclude('**/log4j2-test.xml').each { configFile ->
					def configXml = new XmlParser(false, false).parse(configFile)

					if (configXml.@'xsi:schemaLocation' ==~ /.*spring-[a-z-]*\d\.\d\.xsd.*/) {
						configFiles << configFile
					}
				}
			}
			if (configFiles) {
				throw new InvalidUserDataException('Hardcoded XSD version in the config files:\n' +
						configFiles.collect {relativePath(it)}.join('\n') +
						'\nPlease, use versionless schemaLocations for Spring XSDs to avoid issues with builds ' +
						'on different versions of dependencies.')
			}
		}
	}

	jacocoTestReport {
		reports {
			xml.enabled false
			csv.enabled false
			html.destination file("${buildDir}/reports/jacoco/html")
		}
	}

	test {
		maxHeapSize = "1024m"
		jacoco {
			append = false
			destinationFile = file("$buildDir/jacoco.exec")
		}
	}

	task testAll(type: Test, dependsOn: check)

	gradle.taskGraph.whenReady { graph ->
		if (graph.hasTask(testAll)) {
			test.enabled = false
		}
	}

	tasks.withType(Test).all {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		dependsOn checkTestConfigs

		if (name ==~ /(testAll)/) {
			systemProperty 'RUN_LONG_INTEGRATION_TESTS', 'true'
		}

		environment 'SI_FATAL_WHEN_NO_BEANFACTORY', 'true'

		useJUnitPlatform()
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}
/*
	checkstyle {
		configFile = file("$rootDir/src/checkstyle/checkstyle.xml")
		toolVersion = "8.9"
	}
*/

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	check.dependsOn javadoc
	build.dependsOn jacocoTestReport
}
project(':spring-integration:spring-integration-amqp') {
	description = 'Spring Integration AMQP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile("org.springframework.amqp:spring-rabbit:$springAmqpVersion")

		testCompile("org.springframework.amqp:spring-rabbit-junit:$springAmqpVersion")
		testCompile project(":spring-integration:spring-integration-stream")
	}
}

project(':spring-integration:spring-integration-core') {
	description = 'Spring Integration Core'

	dependencies {
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-messaging:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile ("org.springframework.retry:spring-retry:$springRetryVersion") {
			exclude group: 'org.springframework', module: 'spring-core'
		}
		compile "io.projectreactor:reactor-core:$reactorVersion"
		compile("com.fasterxml.jackson.core:jackson-databind:$jackson2Version")
		compile("com.jayway.jsonpath:json-path:$jsonpathVersion")
		compile("io.fastjson:boon:$boonVersion")
		compile("com.esotericsoftware:kryo-shaded:$kryoShadedVersion")
		compile("io.micrometer:micrometer-core:$micrometerVersion")

		testCompile ("org.aspectj:aspectjweaver:$aspectjVersion")
		testCompile "io.projectreactor:reactor-test:$reactorVersion"
		testCompile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson2Version")
	}
}

project(':spring-integration:spring-integration-event') {
	description = 'Spring Integration ApplicationEvent Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
	}
}

project(':spring-integration:spring-integration-feed') {
	description = 'Spring Integration RSS Feed Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "com.rometools:rome:$romeToolsVersion"
	}
}

project(':spring-integration:spring-integration-file') {
	description = 'Spring Integration File Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "commons-io:commons-io:$commonsIoVersion"

		testCompile project(":spring-integration:spring-integration-gemfire")
		testCompile project(":spring-integration:spring-integration-jdbc")
		testCompile project(":spring-integration:spring-integration-redis")
		testCompile project(":spring-integration:spring-integration-redis").sourceSets.test.output
		testCompile "com.h2database:h2:$h2Version"
		testCompile "io.lettuce:lettuce-core:$lettuceVersion"
		testCompile "io.projectreactor:reactor-test:$reactorVersion"
	}
}

project(':spring-integration:spring-integration-ftp') {
	description = 'Spring Integration FTP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-file")
		compile "commons-net:commons-net:$commonsNetVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion")

		testCompile "org.apache.ftpserver:ftpserver-core:$ftpServerVersion"
		testCompile project(":spring-integration:spring-integration-file").sourceSets.test.output
	}
}

project(':spring-integration:spring-integration-gemfire') {
	description = 'Spring Integration GemFire Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile ("org.springframework.data:spring-data-geode:$springGemfireVersion")
		compile "commons-io:commons-io:$commonsIoVersion"

		testCompile project(":spring-integration:spring-integration-stream")

	}
}

project(':spring-integration:spring-integration-groovy') {
	description = 'Spring Integration Groovy Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile project(":spring-integration:spring-integration-scripting")
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		compile "org.springframework:spring-context-support:$springVersion"

		testCompile "org.springframework:spring-web:$springVersion"
	}
}

project(':spring-integration:spring-integration-http') {
	description = 'Spring Integration HTTP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-webmvc:$springVersion"
		compile ("javax.servlet:javax.servlet-api:$servletApiVersion")
		compile ("com.rometools:rome:$romeToolsVersion")

		testCompile project(":spring-integration:spring-integration-security")
		testCompile ("org.springframework.security:spring-security-config:$springSecurityVersion")
		testCompile ("org.springframework.security:spring-security-test:$springSecurityVersion")
	}
}

project(':spring-integration:spring-integration-ip') {
	description = 'Spring Integration IP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		testCompile project(":spring-integration:spring-integration-stream")
		testCompile project(":spring-integration:spring-integration-event")
	}
}

project(':spring-integration:spring-integration-jdbc') {
	description = 'Spring Integration JDBC Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-jdbc:$springVersion"
		compile ("com.google.guava:guava:$guavaVersion")

		testCompile "com.h2database:h2:$h2Version"
		testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
		testCompile "org.apache.derby:derby:$derbyVersion"
		testCompile "org.apache.derby:derbyclient:$derbyVersion"
		testCompile "org.postgresql:postgresql:$postgresVersion"
		testCompile "mysql:mysql-connector-java:$mysqlVersion"
		testCompile "org.apache.commons:commons-dbcp2:$commonsDbcp2Version"

	}

	// suppress derby localization jar path warnings during test compilation
	compileTestJava.options.compilerArgs = ["${xLintArg},-path"]
}

project(':spring-integration:spring-integration-jms') {
	description = 'Spring Integration JMS Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-jms:$springVersion"
		compile ("javax.jms:javax.jms-api:$jmsApiVersion")
		testCompile("org.apache.activemq:activemq-broker:$activeMqVersion")

		testCompile "org.springframework:spring-oxm:$springVersion"
	}
}

project(':spring-integration:spring-integration-jmx') {
	description = 'Spring Integration JMX Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")

		testCompile "org.aspectj:aspectjweaver:$aspectjVersion"
		testCompile "com.hazelcast:hazelcast:$hazelcastVersion"
	}
}

project(':spring-integration:spring-integration-jpa') {
	description = 'Spring Integration JPA Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-orm:$springVersion"
		compile ("org.eclipse.persistence:javax.persistence:$jpaApiVersion")

		testCompile ("org.springframework.data:spring-data-jpa:$springDataJpaVersion")

		testCompile "com.h2database:h2:$h2Version"

		testCompile "org.hibernate:hibernate-entitymanager:$hibernateVersion"

		testRuntime "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$jpa21ApiVersion"
		testRuntime "org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipseLinkVersion"
		testRuntime "org.springframework:spring-instrument:$springVersion"
	}

	tasks.withType(Test).matching {it.name ==~ /(test)|(testAll)/}.all {
		jvmArgs classpath.files.findAll {
			it.name ==~ /(spring-instrument.+)/}.collect{"-javaagent:$it"
		}
	}

}

project(':spring-integration:spring-integration-mail') {
	description = 'Spring Integration Mail Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.mail:javax.mail-api:$javaxMailVersion")
		compile("com.sun.mail:imap:$javaxMailVersion")
		compile("com.sun.mail:javax.mail:$javaxMailVersion");
		compile("javax.activation:activation:$javaxActivationVersion")
	}

	// suppress javax.activation path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

project(':spring-integration:spring-integration-mongodb') {
	description = 'Spring Integration MongoDB Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile("org.springframework.data:spring-data-mongodb:$springDataMongoVersion")
	}
}

project(':spring-integration:spring-integration-mqtt') {
	description = 'Spring Integration MQTT Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$pahoMqttClientVersion"
	}
}

project(':spring-integration:spring-integration-redis') {
	description = 'Spring Integration Redis Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile ("org.springframework.data:spring-data-redis:$springDataRedisVersion")

		testCompile "io.lettuce:lettuce-core:$lettuceVersion"

		testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
		testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
		testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"

		// To support JUnit 4 tests
		testRuntime "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"

		// To avoid compiler warnings about @API annotations in JUnit code
		testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

		testRuntime "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
		testRuntime "org.apache.logging.log4j:log4j-jcl:$log4jVersion"

		testCompile("com.willowtreeapps.assertk:assertk-jvm:$assertkVersion")

		testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
		testRuntime "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
	}
}

project(':spring-integration:spring-integration-rmi') {
	description = 'Spring Integration RMI Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
	}
}

project(':spring-integration:spring-integration-scripting') {
	description = 'Spring Integration Scripting Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")

		testCompile("org.jruby:jruby:$jrubyVersion")
		testCompile("org.codehaus.groovy:groovy-all:$groovyVersion")
		testCompile("org.python:jython-standalone:$jythonVersion")
	}
}

project(':spring-integration:spring-integration-security') {
	description = 'Spring Integration Security Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile("org.springframework.security:spring-security-core:$springSecurityVersion")

		testCompile ("org.springframework.security:spring-security-config:$springSecurityVersion")
	}
}

project(':spring-integration:spring-integration-sftp') {
	description = 'Spring Integration SFTP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-file")
		compile project(":spring-integration:spring-integration-stream")
		compile "com.jcraft:jsch:$jschVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion")

		testCompile "org.apache.sshd:sshd-core:$apacheSshdVersion"
		testCompile project(":spring-integration:spring-integration-file").sourceSets.test.output
	}
}

project(':spring-integration:spring-integration-stomp') {
	description = 'Spring Integration STOMP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")

		compile ("org.springframework:spring-websocket:$springVersion")
		compile ("io.projectreactor.netty:reactor-netty:$reactorNettyVersion" )

		testCompile project(":spring-integration:spring-integration-websocket")
		testCompile project(":spring-integration:spring-integration-websocket").sourceSets.test.output
		testCompile project(":spring-integration:spring-integration-event")
		testCompile "org.apache.activemq:activemq-stomp:$activeMqVersion"
		testCompile "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVersion"
	}
}

project(':spring-integration:spring-integration-stream') {
	description = 'Spring Integration Stream Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
	}
}

project(':spring-integration:spring-integration-syslog') {
	description = 'Spring Integration Syslog Support'
	dependencies {
		compile project(":spring-integration:spring-integration-ip")
	}
}

project(':spring-integration:spring-integration-test') {
	description = 'Spring Integration Testing Framework'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile project(":spring-integration:spring-integration-test-support")
	}
}

project(':spring-integration:spring-integration-webflux') {
	description = 'Spring Integration HTTP Support'
	dependencies {
		compile (project(":spring-integration:spring-integration-http")) {
			exclude group: 'org.springframework', module: 'spring-webmvc'
		}
		compile "org.springframework:spring-webflux:$springVersion"
		compile ("io.projectreactor.netty:reactor-netty:$reactorNettyVersion" )

		testCompile "org.springframework:spring-webmvc:$springVersion"
		testCompile ("org.springframework.security:spring-security-config:$springSecurityVersion")
		testCompile ("org.springframework.security:spring-security-test:$springSecurityVersion")
		testCompile "io.projectreactor:reactor-test:$reactorVersion"
	}
}

project(':spring-integration:spring-integration-websocket') {
	description = 'Spring Integration WebSockets Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-websocket:$springVersion"

		compile ("org.springframework:spring-webmvc:$springVersion")

		testCompile project(":spring-integration:spring-integration-event")
		testCompile "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVersion"
	}
}

project(':spring-integration:spring-integration-ws') {
	description = 'Spring Integration Web Services Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-oxm:$springVersion"
		compile "org.springframework:spring-webmvc:$springVersion"
		compile ("org.springframework.ws:spring-ws-core:$springWsVersion")

		testCompile "com.thoughtworks.xstream:xstream:$xstreamVersion"
		testCompile ("org.springframework.ws:spring-ws-support:$springWsVersion")
		testCompile ("org.springframework:spring-jms:$springVersion")
		testCompile "javax.jms:javax.jms-api:$jmsApiVersion"
		testCompile "org.igniterealtime.smack:smack-tcp:$smackVersion"
		testCompile "org.igniterealtime.smack:smack-java7:$smackVersion"
		testCompile "org.igniterealtime.smack:smack-extensions:$smackVersion"
		testCompile "javax.mail:javax.mail-api:$javaxMailVersion"

		testRuntime "com.sun.mail:mailapi:$javaxMailVersion"
		testRuntime "com.sun.mail:javax.mail:$javaxMailVersion"
	}
}

project(':spring-integration:spring-integration-xml') {
	description = 'Spring Integration XML Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.springframework:spring-oxm:$springVersion"
		compile ("org.springframework.ws:spring-xml:$springWsVersion")
		compile ("org.springframework.ws:spring-ws-core:$springWsVersion")

		testCompile "xmlunit:xmlunit:$xmlUnitVersion"
	}
}

project(':spring-integration:spring-integration-xmpp') {
	description = 'Spring Integration XMPP Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")
		compile "org.igniterealtime.smack:smack-tcp:$smackVersion"
		compile "org.igniterealtime.smack:smack-java7:$smackVersion"
		compile "org.igniterealtime.smack:smack-extensions:$smackVersion"

		testCompile project(":spring-integration:spring-integration-stream")
		testCompile "org.igniterealtime.smack:smack-experimental:$smackVersion"
	}
}

project(':spring-integration:spring-integration-zookeeper') {
	description = 'Spring Integration Zookeeper Support'
	dependencies {
		compile project(":spring-integration:spring-integration-core")

		compile("org.apache.curator:curator-recipes:$curatorVersion")

		testCompile "org.apache.curator:curator-test:$curatorVersion"
	}
}

project(":spring-integration:spring-integration-bom") {
	description = "Spring Integration (Bill of Materials)"

	configurations.archives.artifacts.clear()
	artifacts {
		// work around GRADLE-2406 by attaching text artifact
		archives(file("spring-integration-bom.txt"))
	}

	install {
		repositories.mavenInstaller {
			pom.whenConfigured {
				packaging = "pom"
				withXml {
					asNode().children().last() + {
						delegate.dependencyManagement {
							delegate.dependencies {
								parent.subprojects.sort { "$it.name" }.each { p ->
									if (p != project) {
										delegate.dependency {
											delegate.groupId(p.group)
											delegate.artifactId(p.name)
											delegate.version(p.version)
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

project(':inttest') {
    dependencies {
        compile project(":spring-integration:spring-integration-core")
        compile project(":spring-integration:spring-integration-file")
        compile "io.projectreactor:reactor-core:3.1.2.RELEASE"
        compile "org.slf4j:slf4j-api:1.6.6"
        compile "org.slf4j:slf4j-simple:1.6.6"

        compile "org.springframework.boot:spring-boot-starter-ws:1.4.7.RELEASE"
        compile "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion"

        testCompile group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version:'2.0.3'
        testCompile "org.springframework.boot:spring-boot-test:$springBootVersion"
        testCompile "org.springframework:spring-test:$springVersion"
        testCompile "junit:junit:4.12"
        /*
        compile "org.springframework.boot:spring-boot:$springBootVersion"
        compile "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-tx:$springVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-messaging:$springVersion"

        compile group: 'org.springframework.ws', name: 'spring-ws', version: "3.0.3.RELEASE"
        compile group: 'org.springframework.ws', name: 'spring-ws-core', version: "3.0.3.RELEASE"
        compile group: 'org.springframework.ws', name: 'spring-ws-security', version: "3.0.3.RELEASE"

        compile "org.springframework.security:spring-security-core:$springVersion"

        testCompile "org.springframework.boot:spring-boot-test:$springBootVersion"
        testCompile "org.springframework:spring-test:$springVersion"
        testCompile "junit:junit:4.12"
        */
    }
}


